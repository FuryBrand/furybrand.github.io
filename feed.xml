<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>For Love To Love</title>
    <description>Write down &amp; share my person notes. 记录和分享我的个人笔记</description>
    <link>http://furybrand.github.io//</link>
    <atom:link href="http://furybrand.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 23 Jan 2025 12:41:04 +0000</pubDate>
    <lastBuildDate>Thu, 23 Jan 2025 12:41:04 +0000</lastBuildDate>
    <generator>Jekyll v4.3.4</generator>
    
      <item>
        <title>xin行-实战前端工程维护</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;组内现在没有前端同学，之前的工程是从其他组协调前端同学支持开发的。招聘一直不顺利，导致现在项目二期的时候又去借人，然后由于框架不同，又起了一个新工程……如果再这么搞，后面就是屎山代码无疑了。而且协调资源这个事情不牢靠，得遵循人家的排期和优先级。所以基于底线思维，我准备熟悉一下前端，尝试在AI的帮助下自己修改逻辑。本次的需求非常简单，修改一个后台跳转按钮的展示逻辑，如果是管理员就展示该按钮。这里做一个笔记，好帮助组内和其他遭遇类似处境的同学。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-确认该前端工程所使用的技术栈&quot;&gt;1. 确认该前端工程所使用的技术栈&lt;/h2&gt;

&lt;p&gt;我这个工程有一个简单的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt;，节省了我们该步骤的时间。如果没有这些，可以尝试通过工程内的目录结构询问AI，得到技术栈的信息。&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gh&quot;&gt;# Vue 3 + TypeScript + Vite&lt;/span&gt;

This template should help get you started developing with Vue 3 and TypeScript in Vite. The template uses Vue 3 &lt;span class=&quot;sb&quot;&gt;`&amp;lt;script setup&amp;gt;`&lt;/span&gt; SFCs, check out the &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;script setup docs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://v3.vuejs.org/api/sfc-script-setup.html#sfc-script-setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; to learn more.

&lt;span class=&quot;gu&quot;&gt;## Recommended Setup&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VS Code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://code.visualstudio.com/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; + &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Vue - Official&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://marketplace.visualstudio.com/items?itemName=Vue.volar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;previously&lt;/span&gt; Volar) and disable Vetur
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; Use &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vue-tsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://github.com/vuejs/language-tools/tree/master/packages/tsc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; for performing the same type checking from the command line, or for generating d.ts files for SFCs.

&lt;span class=&quot;gu&quot;&gt;### Get Start&lt;/span&gt;

node -v &amp;gt;=18

npm install pnpm

pnpm install

pnpm run dev
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;基于上述的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt;，在AI的帮助下，我们了解到了一些关键信息。该工程使用了Vue3和TypeScript技术，并且使用Vite作为编译打包工具。开发工具使用的是VS Code + Vue插件。我们需要先安装node，然后通过node的包管理工具npm安装pnpm，然后pnpm会基于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pnpm-lock.yaml&lt;/code&gt;文件安装相关依赖。最后用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pnpm run dev&lt;/code&gt;命令，就可以在本地启动了。&lt;/p&gt;

&lt;h2 id=&quot;2-准备系统环境并了解前端工程如何启动&quot;&gt;2. 准备系统环境并了解前端工程如何启动&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/zh-cn&quot;&gt;Node.js官网&lt;/a&gt;下载安装包并安装。&lt;/li&gt;
  &lt;li&gt;命令行执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install pnpm&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;命令行执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pnpm install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;命令行执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pnpm run dev&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看似很简单，但是其实每一步都可能有坑，但是不要紧，在思路整体明确，大方向确定的前提下，只需要一个一个问题去解决就好了。AI是个博学的好老师，但是他也有他的局限性，当前主流的与LLM交互的方式还是文本。对比人类他虽然有海量的知识，但是他缺少信息收集的媒介，在沟通时对问题掌握的信息就不全，更何况他还可能有“幻觉”。所以现阶段人类和AI搭配才能极大的提升生产力。&lt;/p&gt;

&lt;p&gt;扯远了，回来，我当时在执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pnpm run dev&lt;/code&gt;的时候报错如下。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;liutianyu@ZB-BL657NBY MINGW64 /x/coding/Edge &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pnpm run dev

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; edge@1.0.0 dev X:&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;oding&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;dge
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; vite

error when starting dev server:
Error: listen EADDRNOTAVAIL: address not available 36.110.181.172:8080
    at Server.setupListenHandle &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;as _listen2] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;node:net:1915:21&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      
    at listenInCluster &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;node:net:1994:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at GetAddrInfoReqWrap.callback &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;node:net:2203:7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at GetAddrInfoReqWrap.onlookupall &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;as oncomplete] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;node:dns:132:8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 ELIFECYCLE  Command failed with &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;code 1.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;尝试在代码库中寻找&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;36.110.181.172&lt;/code&gt;无果。于是我递进式的问了以下几个问题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;----------------------------------------------------------------------------------------
## 对话1：执行pnpm run dev命令后，系统自动做了哪些动作

## 回答：

执行 pnpm run dev 命令后，系统会自动执行以下动作：

读取 package.json 文件：

pnpm run dev 会首先查找项目根目录下的 package.json 文件，以找到与 dev 相关的脚本命令。
查找 scripts 字段：

在 package.json 文件中，pnpm 会查找 scripts 字段下的 dev 脚本。这个字段通常定义了一系列可以通过 pnpm run &amp;lt;script&amp;gt; 执行的命令。
执行指定的命令：

一旦找到 dev 脚本，pnpm 会执行该脚本中定义的命令。这通常是启动开发服务器的命令，例如 vite、webpack-dev-server、next dev 等，具体取决于项目的构建工具和配置。
例如，如果 dev 脚本是 &quot;vite&quot;, 那么 pnpm run dev 实际上是在执行 vite 命令，启动 Vite 开发服务器。
启动开发环境：

根据 dev 脚本的定义，通常会启动一个开发服务器。这可能包括以下动作：
编译和打包源代码。
监听文件变化并进行热重载（Hot Module Replacement）。
在浏览器中打开项目的开发地址（通常是 http://localhost:3000 或其他端口）。
处理依赖：

在执行过程中，pnpm 可能会解析和加载项目的依赖，确保所有必要的包都可用。
如果开发服务器需要的依赖没有安装，通常会出现错误提示。
输出日志信息：

pnpm 和开发服务器会在终端中输出相关的日志信息，包括编译进度、错误信息、警告以及开发服务器的运行地址等。
通过这些步骤，pnpm run dev 为开发者提供了一个实时更新的开发环境，便于进行代码编写和调试。具体的行为可能会因项目的配置和使用的工具而有所不同。

----------------------------------------------------------------------------------------
## 对话2：package.json中的scripts如下：

“scripts”: {
“dev”: “vite”,
“build”: “vue-tsc &amp;amp;&amp;amp; vite build”,
“preview”: “vite preview”,
“prepare”: “husky”,
“test”: “vitest”,
“test-unit”: “vitest -c vitest.unit.config.ts”,
“lint:eslint”: “eslint --cache --max-warnings 0 &quot;{src,mock}//*.{vue,js,ts,tsx}&quot; --fix&quot;,
“lint:prettier”: &quot;prettier --write &quot;src//.{js,ts,json,tsx,css,less,scss,vue,html,md}&quot;&quot;,
“lint:stylelint”: &quot;stylelint --cache --fix &quot;src/**/.{vue,css,scss,postcss,less}&quot; --cache --cache-location node_modules/.cache/stylelint/”,
“lint”: “pnpm lint:eslint &amp;amp;&amp;amp; pnpm lint:prettier &amp;amp;&amp;amp; pnpm lint:stylelint”
},

## 回答：

在 package.json 文件中，scripts 字段定义了一系列可以通过 pnpm run &amp;lt;script&amp;gt; 来执行的命令。这些脚本用于简化常见的开发任务。让我们逐一了解你提供的这些脚本的作用：

dev: &quot;vite&quot;

启动 Vite 开发服务器。运行 pnpm run dev 时，项目会在开发模式下启动，支持热重载，方便开发和调试。
build: &quot;vue-tsc &amp;amp;&amp;amp; vite build&quot;

首先运行 vue-tsc 进行 TypeScript 类型检查，确保代码没有类型错误。
然后运行 vite build，使用 Vite 进行生产环境的构建，将项目打包为可部署的静态文件。
preview: &quot;vite preview&quot;

启动一个本地服务器来预览生产构建的内容。这通常用于在部署之前验证构建结果。
prepare: &quot;husky&quot;

用于初始化 Husky，以便在项目中设置 Git 钩子。通常在安装依赖后自动执行。
test: &quot;vitest&quot;

运行 Vitest 测试框架，执行项目中的测试用例。
test-unit: &quot;vitest -c vitest.unit.config.ts&quot;

使用指定的配置文件 vitest.unit.config.ts 运行 Vitest，通常用于单元测试。
lint:eslint: &quot;eslint --cache --max-warnings 0 \&quot;{src,mock}/**/*.{vue,js,ts,tsx}\&quot; --fix&quot;

使用 ESLint 对指定目录中的文件进行语法检查和修复。
--cache：启用缓存以加快后续运行速度。
--max-warnings 0：将警告视为错误。
--fix：自动修复可以修复的问题。
lint:prettier: &quot;prettier --write \&quot;src/**/*.{js,ts,json,tsx,css,less,scss,vue,html,md}\&quot;&quot;

使用 Prettier 格式化指定目录中的文件。
lint:stylelint: &quot;stylelint --cache --fix \&quot;src/**/*.{vue,css,scss,postcss,less}\&quot; --cache --cache-location node_modules/.cache/stylelint/&quot;

使用 Stylelint 检查和修复样式文件。
--cache：启用缓存。
--fix：自动修复可以修复的问题。
--cache-location：指定缓存位置。
lint: &quot;pnpm lint:eslint &amp;amp;&amp;amp; pnpm lint:prettier &amp;amp;&amp;amp; pnpm lint:stylelint&quot;

依次运行 ESLint、Prettier 和 Stylelint，对项目进行全面的代码质量检查和格式化。
这些脚本帮助开发者自动化常见的开发任务，提高开发效率和代码质量。根据项目需求，可以自定义和扩展这些脚本。

----------------------------------------------------------------------------------------
## 对话3：vite的启动配置文件是什么

## 回答：
Vite 的启动配置文件通常是 vite.config.js 或 vite.config.ts，具体取决于你使用的是 JavaScript 还是 TypeScript。这个配置文件用于定义 Vite 的各种配置选项，包括开发服务器设置、构建选项、插件配置等。

典型的 Vite 配置文件结构
以下是一个简单的 vite.config.js 示例：

import { defineConfig } from &apos;vite&apos;;
import vue from &apos;@vitejs/plugin-vue&apos;;

export default defineConfig({
  plugins: [vue()],
  server: {
    host: &apos;localhost&apos;,
    port: 3000,
    open: true, // 自动打开浏览器
  },
  build: {
    outDir: &apos;dist&apos;, // 输出目录
  },
});

如果你使用 TypeScript，可以使用 vite.config.ts：

import { defineConfig } from &apos;vite&apos;;
import vue from &apos;@vitejs/plugin-vue&apos;;

export default defineConfig({
  plugins: [vue()],
  server: {
    host: &apos;localhost&apos;,
    port: 3000,
    open: true,
  },
  build: {
    outDir: &apos;dist&apos;,
  },
});

配置文件的常用选项
plugins: 用于配置 Vite 插件，例如 Vue、React 等框架插件。
server: 配置开发服务器选项，如 host、port、open（自动打开浏览器）等。
build: 配置构建选项，包括 outDir（输出目录）、rollupOptions（自定义 Rollup 选项）等。
resolve: 配置模块解析选项，如别名设置。
css: 配置 CSS 相关选项，如预处理器设置。
使用 Vite 配置文件
默认路径: Vite 会在项目根目录下自动寻找 vite.config.js 或 vite.config.ts。
自定义路径: 如果你的配置文件不在默认路径，可以使用 vite --config &amp;lt;path&amp;gt; 来指定配置文件位置。
这些配置选项可以根据项目的具体需求进行调整，以实现更复杂的功能和优化。Vite 的配置文件通过 defineConfig 函数来定义，这样可以获得更好的类型提示和错误检查，特别是在使用 TypeScript 时。

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后我在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vite.config.ts&lt;/code&gt;中找到了如下配置：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;server:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;host:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;local.xxx.com&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;port:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;open:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;proxy:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;^/camera/|^/event/|^/ws/|^/user/&apos;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;target:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;http://&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.129&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;changeOrigin:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ws:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;headers:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;referer:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;http://&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.129&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;origin:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;http://&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;192.168&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.129&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后尝试&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping local.xxx.com&lt;/code&gt;发现可达，且地址就是先前的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;36.110.181.172&lt;/code&gt;。那么就很明确了，估计前端同事在本地是有配置host的，那么解决方案就是：&lt;/p&gt;

&lt;p&gt;A. 修改配置文件中的host为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt;&lt;br /&gt;
B. 配置本机的host文件，将local.xxx.com指向&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我选择了B选项，毕竟不修改代码、尽量贴近原始的开发环境显然出错的风险较低。&lt;/p&gt;

&lt;h2 id=&quot;3-学习前端工程的目录结构并尝试寻找需要修改逻辑的位置&quot;&gt;3. 学习前端工程的目录结构并尝试寻找需要修改逻辑的位置&lt;/h2&gt;

&lt;p&gt;事后来看，这部分消耗的时间几乎是最多的，我用了半天左右的时间研究代码，因为完全没有前端经验，所以阅读起来很费事。感觉本质是不具备前端工程的思维，这部分没有办法，只能硬嗑。下面记录下我当时的思路。&lt;/p&gt;

&lt;p&gt;首先使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir /b&lt;/code&gt;命令导出工程的根目录，然后和AI对话，学习每个文件夹的作用。为了方便，我直接把作用标记在下面了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;X:\coding\Edge&amp;gt;dir /b    
.eslintrc.cjs   `ESLint 配置文件，用于定义代码检查规则。`
.gitignore  `Git 忽略文件，指定哪些文件或文件夹不应被 Git 版本控制。`
.husky  `Husky 配置文件夹，用于 Git 钩子管理。`
.prettierignore `指定 Prettier 格式化时应忽略的文件。`
.prettierrc.cjs `Prettier 配置文件，用于代码格式化的规则。`
.stylelintrc.json `Stylelint 配置文件，用于 CSS 的代码检查。`
.vscode `VS Code 配置文件夹，通常包含项目特定的编辑器设置。`
cert    `可能存放证书文件，通常用于 HTTPS 开发环境。`
components.d.ts `TypeScript 的类型声明文件，可能是自动生成的，用于组件类型信息。`
dist    `构建输出文件夹，存放生产环境的打包文件。`
index.html  `项目的入口 HTML 文件。`
node_modules    `存放通过 npm 或 pnpm 安装的依赖包。`
package.json    `项目的元数据文件，包含项目的依赖、脚本和其他配置信息。`
pnpm-lock.yaml  `pnpm 的锁定文件，确保项目依赖的一致性。`
postcss.config.js   `PostCSS 的配置文件，用于处理 CSS。`
public  `用于存放静态资源的文件夹，直接复制到构建输出中。`
README.md   `项目的自述文件，通常包含项目的简介、安装和使用说明。`
src `项目的源代码文件夹，包含应用的主要代码。`
stats.html  `可能用于性能分析或构建报告的 HTML 文件。`
tailwind.config.js  `Tailwind CSS 的配置文件，用于自定义 Tailwind 的主题和插件。`
tsconfig.json   `TypeScript 配置文件，定义 TypeScript 编译器的选项。`
tsconfig.node.json  `通常是为 Node.js 环境定制的 TypeScript 配置。`
vite.config.ts  `Vite 的配置文件，用于定义构建和开发服务器的设置。`
vite.config.ts.timestamp-1724318016989-dd586d9058247.mjs    ``
vitest.config.ts    `用于 Vitest 测试框架的配置文件。`
vitest.unit.config.ts   `用于 Vitest 测试框架的配置文件。`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok，那么源代码应该在src文件夹中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;X:\coding\Edge&amp;gt;cd src 

X:\coding\Edge\src&amp;gt;dir /b
App.vue `这是 Vue.js 应用的根组件。通常包含应用的基本布局和路由出口（router-view）。`
assets  `存放静态资源，如图像、字体等。通常会通过 Webpack 或 Vite 进行处理和打包。`
auto-imports.d.ts   `自动生成的类型声明文件，通常用于自动导入功能的类型支持。这可能与某些插件（如 unplugin-auto-import）相关。`
components  `存放可复用的 Vue 组件。组件是应用的基本构建块，通常用于封装 UI 元素和逻辑。`
layout  `存放应用的布局组件。这些组件通常定义应用的整体结构，如导航栏、侧边栏、页脚等。`
locales `存放国际化（i18n）资源文件，通常是 JSON 或 JavaScript 文件，用于多语言支持。`
main.ts `应用的入口文件。在这里初始化 Vue 实例，注册全局组件、插件，并挂载到 DOM。`
router  `存放路由配置文件。通常包含一个定义应用路由的文件（如 index.ts），使用 Vue Router 来管理页面导航。`
services    `存放与业务逻辑相关的服务代码，通常用于与后端 API 交互、数据处理等。`
stores  `存放状态管理相关文件，通常使用 Vuex 或 Pinia 来管理应用的全局状态。`
styles  `存放全局样式文件，如 CSS、SCSS 等。可以包含应用的主题、变量和混入等。`
types   `存放 TypeScript 类型定义文件，通常用于定义接口、类型别名和其他类型相关的内容。`
utils   `存放工具函数和辅助库。这些函数通常是与业务无关的通用功能。`
views   `存放页面级组件，这些组件通常对应于路由定义的页面。`
vite-env.d.ts   `Vite 的环境变量类型声明文件，通常用于扩展 TypeScript 对 Vite 特定环境变量的支持。`
__tests__   `存放测试文件。通常使用 Jest、Vitest 或其他测试框架进行单元测试、集成测试等。`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来就是死磕的重点，太长了我就不附对话记录了，重点说下问的思路。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;问AI页面展示是通过哪些文件组合展示出来的&lt;/li&gt;
  &lt;li&gt;然后把可能的文件粘给AI让他帮忙做解读&lt;/li&gt;
  &lt;li&gt;如果解读的太粗略，就请AI用语法的维度做更细致的解读&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样一点点抽丝剥茧，就可以定位到要修改的位置了。我大致记录下自己通过这个经历后，对前端工程的一个初步认识。&lt;/p&gt;

&lt;p&gt;关于文件的具体阅读顺序：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;src\main.ts，是初始化文件，在我手上的工程中设置和初始化一个 Vue.js 应用程序，包括状态管理、路由和样式。文件中用到了’./router’、’./App.vue’。使用App.vue加载了touter&lt;/li&gt;
  &lt;li&gt;src\App.vue，设置了应用程序的全局配置，包括语言包和自定义的本地化配置，并使用 Element Plus 的组件来实现。&lt;/li&gt;
  &lt;li&gt;src\router\index.ts，router文件夹下只有这一个文件，这个文件整体上定义了一个基本的路由系统，并提供了动态添加路由和全局路由守卫的机制。实际在这里发现了一些视图组件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.vue&lt;/code&gt;和一个用户管理模块&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import { useUser } from &apos;@/stores&apos;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;由于我是要修改一个按钮的展示逻辑，所以就在组件中继续挖，找到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SideBar.vue&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于VUE3的一些特性：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;响应式数据：在 Vue.js 中，响应式数据是指当数据发生变化时，相关的视图会自动更新的数据。这种机制允许开发者专注于业务逻辑和数据管理，而不需要手动操作 DOM 来更新视图。&lt;/li&gt;
  &lt;li&gt;生命周期钩子：Vue 3 的生命周期钩子包括 beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeUnmount、unmounted 等，用于在组件的不同阶段执行特定的逻辑。（用大白话讲就是页面元素被触发时会同步触发我们写好的逻辑）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-尝试修改逻辑并测试代码&quot;&gt;4. 尝试修改逻辑并测试代码&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SideBar.vue&lt;/code&gt;中定义了我要修改的按钮的展示逻辑，当前是通过userStore.url是否为空决定的。&lt;/p&gt;

&lt;p&gt;此处引入一个新概念&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pinia&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pinia 是 Vue 3 中的一种状态管理库，它被设计为 Vuex 的替代方案，提供了一种更现代、更轻量级的方式来管理应用程序的状态。&lt;/li&gt;
  &lt;li&gt;Pinia 中最核心的概念是 Store。Store 是 Pinia 的基础单元，用于管理应用程序的状态。每个 store 都是一个独立的模块，可以包含状态（state）、派生状态（getters）和改变状态的方法（actions）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于需求是我需要用登录系统的用户角色判断一个按钮是否展示，所以去看了下userStore的属性，然后在User相关代码里新增了一行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console.log(role, site, userid, username, configurl)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pnpm run dev&lt;/code&gt;启动工程尝试调试，发现了role的具体值，然后就是改原来的逻辑，将userStore.url的判断改为userStore.role的判断。&lt;/p&gt;

&lt;p&gt;再次测试，ok，没问题&lt;/p&gt;

&lt;h2 id=&quot;5-学习前端工程如何打包&quot;&gt;5. 学习前端工程如何打包&lt;/h2&gt;

&lt;p&gt;直接问到了答案，就一个命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pnpm run build&lt;/code&gt;就可以。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;liutianyu@ZB-BL657NBY MINGW64 /x/coding/Edge &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pnpm run build

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; edge@1.0.0 build X:&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;oding&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;dge
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; vue-tsc &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; vite build

vite v5.2.11 building &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;production...
transforming &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; src&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;outer&lt;span class=&quot;se&quot;&gt;\i&lt;/span&gt;ndex.tsBrowserslist: caniuse-lite is outdated. Please run:
  npx update-browserslist-db@latest
  Why you should &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;it regularly: https://github.com/browserslist/update-db#readme
✓ 1615 modules transformed.
dist/assets/pinia-legacy-AaEUKLuD.js             3.74 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   1.87 kB
dist/assets/@vueuse/core-legacy-BtJbpWYn.js      3.87 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   1.91 kB
dist/assets/index-legacy-Bu8rlQgE.js             6.26 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   3.13 kB
dist/assets/index-legacy-B2FL9NkE.js             9.81 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   4.22 kB
dist/assets/vue-router-legacy-DjPqxA3w.js       22.77 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   9.01 kB
dist/assets/manual-monitor-legacy-21OfHFM-.js   34.71 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:  10.55 kB
dist/assets/index-legacy-Bx7DxTqD.js            41.71 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   9.42 kB
dist/assets/polyfills-legacy-CloPzPML.js        47.34 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:  18.66 kB
dist/assets/vue-legacy-rvlWBwQr.js             105.20 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:  39.96 kB
dist/assets/video-monitor-legacy-DdGQ5CQs.js   364.61 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:  93.13 kB
dist/assets/element-plus-legacy-BrGRby7B.js    433.86 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;: 137.17 kB
dist/index.html                            2.86 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   1.14 kB
dist/assets/img-DGGNUpYF.png              11.50 kB
dist/assets/login_bg-CWzTXAxG.webp       232.57 kB
dist/assets/index-CrpbdW4S.css             1.33 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   0.60 kB
dist/assets/index-M5Ong37e.css             1.41 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   0.57 kB
dist/assets/index-9V8B37-U.css             6.22 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   1.99 kB
dist/assets/manual-monitor-CBT3uaAD.css   14.27 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   3.15 kB
dist/assets/video-monitor-4QQwoTR2.css   140.80 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:  20.94 kB
dist/assets/pinia-DzOI_rpy.js              3.66 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   1.88 kB
dist/assets/@vueuse/core-J9Te5kc0.js       3.79 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   1.91 kB
dist/assets/index-DQlIsuG9.js              4.76 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   2.51 kB
dist/assets/index-B-omhTdP.js              5.49 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   2.98 kB
dist/assets/manual-monitor-DCJul52a.js    20.59 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   7.68 kB
dist/assets/vue-router-0Z6UGjoa.js        23.12 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   9.43 kB
dist/assets/index-Bwt9aLT2.js             40.17 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:   8.77 kB
dist/assets/vue-BUczWptF.js              106.70 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:  41.75 kB
dist/assets/video-monitor-VuL7gF2g.js    224.50 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;:  74.40 kB
dist/assets/element-plus-BxSyl5RP.js     443.41 kB │ &lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt;: 144.74 kB
✓ built &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;30.89s
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-发布及线上测试&quot;&gt;6. 发布及线上测试&lt;/h2&gt;

&lt;p&gt;这一步也比较简单了，观察一下之前打包好的文件结构，发现就是和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dist&lt;/code&gt;文件夹的内容相同，直接扔到服务器上就可以了。只能说，很幸运，没有遇到别的问题。重启服务器后测试发现逻辑已经生效了。&lt;/p&gt;

&lt;p&gt;ok，搞定~&lt;/p&gt;

&lt;h2 id=&quot;7-写在最后&quot;&gt;7. 写在最后&lt;/h2&gt;

&lt;p&gt;我是用的是单位提供的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPT-4o-0806&lt;/code&gt;，之前coding的时候也用过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;豆包&lt;/code&gt;，我觉得在我的使用方法下，主流AI没有本质区别，因为他是Co-pilot，我是Pilot。&lt;/p&gt;

&lt;p&gt;另外，和前端同学沟通之后，还有一种方式可以方便的定位代码，使用浏览器插件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vue.js devtools&lt;/code&gt;。但是我还没研究，有机会再分享一下。&lt;/p&gt;

&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2025年1月14日：初稿&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 14 Jan 2025 19:33:00 +0000</pubDate>
        <link>http://furybrand.github.io//2025/01/14/front-end-devops-by-ai/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2025/01/14/front-end-devops-by-ai/</guid>
        
        <category>技术相关</category>
        
        <category>JS</category>
        
        <category>xin行</category>
        
        
      </item>
    
      <item>
        <title>FFmpeg-使用笔记</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;做了两年多的视频相关的产品了，这里记录一下ffmpeg在日常生活中的一些应用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;应该是传统视频领域中最强大的音视频处理软件了，但是由于是命令行软件，所以上手对于非软件行业的用户有一点点门槛。市面上很多音视频相关的软件都是基于FFmpeg做页面开发而来的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ffmpeg.org/download.html&quot;&gt;官方下载链接&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;场景一视频裁切与拼接&quot;&gt;场景一：视频裁切与拼接&lt;/h2&gt;

&lt;p&gt;废话少说，直接上命令行了。&lt;/p&gt;

&lt;p&gt;使用ffmpeg截取并拼接视频的命令：&lt;/p&gt;

&lt;div class=&quot;language-ssh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sudo&lt;/span&gt; ffmpeg -i /home/temp/20231021/ch09_20231017132740_3_0_1107.mp4 -ss &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:20:24 -to &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:23:55 -c:v copy -c:a copy &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;.mp4
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sudo&lt;/span&gt; ffmpeg -i /home/temp/20231021/ch09_20231017164347_3_0_6D08.mp4 -ss &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:27:57 -to &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:44:57 -c:v copy -c:a copy &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;.mp4
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sudo&lt;/span&gt; ffmpeg -i /home/temp/20231021/ch09_20231017212736_3_0_2504.mp4 -ss &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:24:11 -to &lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;:25:49 -c:v copy -c:a copy &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;.mp4
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sudo&lt;/span&gt; ffmpeg -f concat -i file -c copy /data3/11011318471320206009.mp4
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cat&lt;/span&gt; file
&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &apos;1.mp4&apos;
&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &apos;2.mp4&apos;
&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &apos;3.mp4&apos;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;场景二视频转码h265&quot;&gt;场景二：视频转码H.265&lt;/h2&gt;

&lt;p&gt;目前主流的视频是H.264编码的，H.265编码相对压缩比更高，实测各类电影、视频在进行H.265编码后，体积缩减至原始文件的六分之一左右。类似的相对较新的编码格式还有AV1、VP9，但是我没有进行实测。&lt;/p&gt;

&lt;p&gt;使用FFmpeg转码时可以使用CPU也可以使用对应的GPU进行硬件加速。但是压缩比来看，CPU的效果明显更好。从时间成本来看，GPU加速进行转码的话，速度极快。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CPU转码&lt;/strong&gt;：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;-i：指定源文件&lt;/li&gt;
      &lt;li&gt;-c:v libx265：指定视频编码为 libx265 ，也就是将视频重新编码为 H.265 格式。&lt;/li&gt;
      &lt;li&gt;preset medium：设置编码为 medium 。其实不指定也行，medium就是默认值。preset的设置会影响编码的速度和质量平衡，我实际测试过veryslow，质量并没有显著提高，medium是我认为最优的选项。&lt;/li&gt;
      &lt;li&gt;map_metadata 0：复制输入文件的元数据。&lt;/li&gt;
      &lt;li&gt;tag:v hvc1：为输出视频设置标签 hvc1。可以解决转码后的文件不被iPhone识别的问题。&lt;/li&gt;
      &lt;li&gt;map 0:v:0：从输入文件中选择第一个视频流。&lt;/li&gt;
      &lt;li&gt;map 0:a：保留所有的音频流。&lt;/li&gt;
      &lt;li&gt;map 0:s：保留所有的音频流。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ffmpeg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; E:&amp;amp;#92&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;2h265&amp;amp;#92&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;XXXX.mp4 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;:v libx265 &lt;span class=&quot;nt&quot;&gt;-preset&lt;/span&gt; medium &lt;span class=&quot;nt&quot;&gt;-map_metadata&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-tag&lt;/span&gt;:v hvc1 &lt;span class=&quot;nt&quot;&gt;-map&lt;/span&gt; 0&amp;amp;#58&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&amp;amp;#118&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&amp;amp;#58&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-map&lt;/span&gt; 0:a E:&amp;amp;#92&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;2h265_output&amp;amp;#92&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;XXXX.mp4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;GPU转码（NVIDIA平台）&lt;/strong&gt;：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;-c:v hevc_nvenc：使用NVIDA的GPU进行H.265编码，逻辑上和FFmpeg编译的版本有关系，不过我的NVDIA GeForce RTX 4060可以直接使用。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ffmpeg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; E:&amp;amp;#92&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;2h265&amp;amp;#92&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;XXXX.mp4 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;:v hevc_nvenc &lt;span class=&quot;nt&quot;&gt;-preset&lt;/span&gt; medium &lt;span class=&quot;nt&quot;&gt;-map_metadata&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-tag&lt;/span&gt;:v hvc1 &lt;span class=&quot;nt&quot;&gt;-map&lt;/span&gt; 0&amp;amp;#58&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&amp;amp;#118&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&amp;amp;#58&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;0 &lt;span class=&quot;nt&quot;&gt;-map&lt;/span&gt; 0:a E:&amp;amp;#92&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;2h265_output&amp;amp;#92&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;XXXX.mp4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;我的转码程序&quot;&gt;我的转码程序&lt;/h4&gt;

&lt;p&gt;我的程序需要满足以下几项需求：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;更高的压缩比，为了节省空间（省购买硬盘的钱）。&lt;/li&gt;
  &lt;li&gt;保留手机拍摄视频的时间戳及地理位置信息，同时需要解决IOS、安卓的兼容性，因为我是双持用户，照片会两处备份。&lt;/li&gt;
  &lt;li&gt;转码需要保留电影的多音轨、多字幕。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;程序是基于python的实现，安卓上是通过Termux来运行的。虽然平台不同，但是实测转码结果相同。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Windows版本&lt;/strong&gt;：&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://furybrand.github.io/assets/2024/2024-07-20-ffmpeg-notes/h264_to_h265_tool.zip&quot;&gt;Windows版命令行转码工具&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;安卓版本&lt;/strong&gt;：
等写完再补充。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2024年7月20日：初稿。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 20 Jul 2024 18:01:00 +0000</pubDate>
        <link>http://furybrand.github.io//2024/07/20/ffmpeg-notes/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2024/07/20/ffmpeg-notes/</guid>
        
        <category>技术相关</category>
        
        <category>FFmpeg</category>
        
        
      </item>
    
      <item>
        <title>Python-控制Chrome的登录与窗口调整</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;GPT真的很好用，已经可以很大程度上辅助人写代码了。研发没时间弄，为了项目推进我直接开干&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1背景&quot;&gt;1.背景&lt;/h2&gt;

&lt;p&gt;BS架构的视频相关项目，当前版本视频长期放置之后画面会延迟，为了帮助现场用起来所以搞了自动化的脚本对程序进行初始化，登陆Web系统，跳转指定页面，控制Chrome窗口位置并最大化。&lt;/p&gt;

&lt;h2 id=&quot;2编程&quot;&gt;2.编程&lt;/h2&gt;

&lt;p&gt;知识点清单：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;selenium，控制浏览器&lt;/li&gt;
  &lt;li&gt;tkinter，绘制python程序窗体&lt;/li&gt;
  &lt;li&gt;pygetwindow，控制系统的窗口&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://furybrand.github.io/assets/2024/2024-07-18-python-automatic-chrome/automate_chrome.py&quot;&gt;代码示例&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;3实施&quot;&gt;3.实施&lt;/h2&gt;

&lt;h4 id=&quot;知识点1将python打包exe可执行文件&quot;&gt;知识点1：将python打包exe可执行文件&lt;/h4&gt;
&lt;p&gt;参考这里&lt;a href=&quot;/2018/11/28/Python2exe/&quot;&gt;Python-将python文件打包成exe文件&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;知识点2将python环境迁移至对象机器并离线安装&quot;&gt;知识点2：将python环境迁移至对象机器并离线安装&lt;/h4&gt;

&lt;p&gt;主要目的是防止对象机器没有可靠外网。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;导出依赖列表&lt;/strong&gt;：
在开发机器上，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip freeze&lt;/code&gt;来创建一个包含所有已安装依赖的列表。在一个空文件夹中，打开命令行工具并执行以下命令：&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;pip freeze &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;这将在当前目录下创建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;文件，里面列出了所有已安装的包及其版本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;下载依赖包&lt;/strong&gt;：
接下来，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip download&lt;/code&gt;命令来下载&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt;中列出的所有包及其依赖项。&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;pip download &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; ./
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;在目标机器上安装依赖&lt;/strong&gt;：
在目标机器上，进入对应目录，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;来安装这些包。执行以下命令：&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;验证安装&lt;/strong&gt;：
安装完成后，可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip list&lt;/code&gt;命令来验证是否所有的包都已正确安装。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2024年7月18日：初稿&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 18 Jul 2024 19:33:00 +0000</pubDate>
        <link>http://furybrand.github.io//2024/07/18/python-automatic-chrome/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2024/07/18/python-automatic-chrome/</guid>
        
        <category>技术相关</category>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>xin阅:《如何阅读一本书》</title>
        <description>&lt;h2 id=&quot;推介词&quot;&gt;推介词&lt;/h2&gt;

&lt;p&gt;万事万物都有方法论，即便是艺术也一样。所以我认为一个人只要用心，在任何领域都可以成为专家（但是要想成为大师，就要靠天赋了）。《如何阅读一本书》其实就是一套教导读者如何阅读的方法论。现在社会，最大的公平就是接受教育的公平，有了知识、学识、经验才有机会跨越阶层的鸿沟。而最易实现的教育就是通过读书而进行的“自我教育”，所以教会人们阅读是非常重要的，而本书的目的就恰恰在此。我个人认为具备能阅读常规小说的水平时，就可以阅读这本书了，并且越早越好。&lt;/p&gt;

&lt;h2 id=&quot;碎碎念&quot;&gt;碎碎念&lt;/h2&gt;

&lt;p&gt;这本书其实不是今年读的，其实是去年读的。去年下半年受到B站Up主“所长林超”在B站的课程“给年轻人的跨学科工具箱”影响，意识到阅读的重要性，于是重拾起了阅读的习惯。说来惭愧，大学毕业之后好像就没有再做过啥深度阅读了。拾起了阅读的习惯之后，读的第一本书是《金字塔原理》，因为我有记笔记和刻意练习的习惯，所以过程中就一直在探索好的笔记记录及呈现的方式。从markdown到思维导图，最后买了mindmaster的永久会员。由于软件有登录数量限制，为了方便随时随地回顾复习，也为了推介好书，于是就有了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xin阅&lt;/code&gt;这个新栏目。&lt;/p&gt;

&lt;h2 id=&quot;读书笔记&quot;&gt;读书笔记&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://furybrand.github.io/assets/xinyue/how_to_read_a_book.pdf&quot;&gt;pdf版读书笔记&lt;/a&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*仅用于个人复习强化记忆使用&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2022年2月10日：初稿。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 10 Feb 2022 12:30:00 +0000</pubDate>
        <link>http://furybrand.github.io//2022/02/10/reading-note-how-to-read-a-book/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2022/02/10/reading-note-how-to-read-a-book/</guid>
        
        <category>xin阅</category>
        
        
      </item>
    
      <item>
        <title>xin食:红烧肉</title>
        <description>&lt;h2 id=&quot;用时&quot;&gt;用时&lt;/h2&gt;

&lt;p&gt;全程1.5小时以内&lt;/p&gt;

&lt;h2 id=&quot;食材&quot;&gt;食材&lt;/h2&gt;

&lt;p&gt;五花肉&lt;/p&gt;

&lt;h2 id=&quot;调料&quot;&gt;调料&lt;/h2&gt;

&lt;p&gt;油、料酒、冰糖、葱、姜、大料、桂皮、香叶、酱油、白糖、盐、腐乳汁&lt;/p&gt;

&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;直接热锅烫猪皮（去毛去腥），烙到大面积变硬，有些许焦&lt;/li&gt;
  &lt;li&gt;热水泡5分钟后，将肉皮刮净（还是去毛）&lt;/li&gt;
  &lt;li&gt;改刀切成大块&lt;/li&gt;
  &lt;li&gt;将肉冷水下锅，加入花雕酒（或料酒），带水煮沸后将肉捞出&lt;/li&gt;
  &lt;li&gt;空锅小火炒刚刚捞出的肉，将油逼出后捞出。（油可以炒菜炖鱼用）&lt;/li&gt;
  &lt;li&gt;锅中加入油和冰糖炒糖色，冰糖化了之后有些黄的时候转小火（防止炒糊）继续炒，至枣红色的时候下肉翻炒上色。&lt;/li&gt;
  &lt;li&gt;加入葱姜大料桂皮香叶后继续翻炒几下&lt;/li&gt;
  &lt;li&gt;加入莫过食材的热水后，加入料酒、酱油、两勺糖一勺盐以及一些腐乳汁。&lt;/li&gt;
  &lt;li&gt;大火烧开，小火炖20分钟左右（此时肉是颤颤巍巍的）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-09-05-braised-pork-with-brown-sauce/20210905193902.jpg&quot; alt=&quot;效果图&quot; /&gt;
&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-09-05-braised-pork-with-brown-sauce/20210905193912.jpg&quot; alt=&quot;效果图&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tips&quot;&gt;Tips&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;第五步将五花肉的油逼出时，小火满满来，会出很多油的，若五花肉中保有的油太多，则会导致成品特别油腻。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://b23.tv/0jv6kj&quot;&gt;1947年老爷爷的红烧肉，老规矩做法追寻最传统的老味道，春节家宴上年味菜对决走起！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Sep 2021 19:30:00 +0000</pubDate>
        <link>http://furybrand.github.io//2021/09/05/braised-pork-with-brown-sauce/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2021/09/05/braised-pork-with-brown-sauce/</guid>
        
        <category>xin食</category>
        
        
      </item>
    
      <item>
        <title>xin食:豆角炖排骨</title>
        <description>&lt;h2 id=&quot;用时&quot;&gt;用时&lt;/h2&gt;

&lt;p&gt;全程4小时以内(食材准备2小时，两次炖共需1小时)&lt;/p&gt;

&lt;h2 id=&quot;食材&quot;&gt;食材&lt;/h2&gt;

&lt;p&gt;排骨、油豆角（品种有：一点红、家雀蛋、黄金沟。如果买不到的话，四季豆也是可以的）&lt;/p&gt;

&lt;h2 id=&quot;调料&quot;&gt;调料&lt;/h2&gt;

&lt;p&gt;油、葱、姜、八角、料酒、酱油、花椒面、胡椒粉、盐、糖&lt;/p&gt;

&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;精排（肋排吗？）泡水2小时。&lt;/li&gt;
  &lt;li&gt;热锅凉油，加入&lt;strong&gt;葱、姜、八角&lt;/strong&gt;煸香&lt;/li&gt;
  &lt;li&gt;加入排骨，大火煸炒&lt;/li&gt;
  &lt;li&gt;加入花雕酒（若无则用料酒）、酱油、花椒面继续煸炒至变色&lt;/li&gt;
  &lt;li&gt;加入老抽上色&lt;/li&gt;
  &lt;li&gt;加入热水，水要盖过排骨。&lt;/li&gt;
  &lt;li&gt;待水煮沸后漂去血沫。&lt;/li&gt;
  &lt;li&gt;小火炖半小时后，称出备用。此时一般的排骨就能达到八分熟了。&lt;/li&gt;
  &lt;li&gt;再中火煸炒豆角（过程中加入些许盐调味）&lt;/li&gt;
  &lt;li&gt;将豆角加入到排骨中，大火加热后转小火炖，加入些许白糖提鲜，炖半小时（开盖炖）&lt;/li&gt;
  &lt;li&gt;大火收汁然后加入一勺胡椒粉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-09-05-stewed-spare-ribs-with-green-bean/20210905193750.jpg&quot; alt=&quot;效果图&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1p54y1V7Dy?from=search&amp;amp;seid=14842755527182873001&quot;&gt;爷爷的北方家常菜排骨炖豆角，做好还需要有一点讲究的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Sep 2021 19:00:00 +0000</pubDate>
        <link>http://furybrand.github.io//2021/09/05/stewed-spare-ribs-with-green-bean/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2021/09/05/stewed-spare-ribs-with-green-bean/</guid>
        
        <category>xin食</category>
        
        
      </item>
    
      <item>
        <title>记录TX2开发板刷机</title>
        <description>&lt;h2 id=&quot;1刷机环境准备&quot;&gt;1.刷机环境准备&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;准备一台Ubuntu18.04.5 LTS的主机（没试过其他版本的）、一个支持HDMI接口的显示器（连接开发板用）、USB键鼠。&lt;/li&gt;
  &lt;li&gt;从&lt;a href=&quot;https://developer.nvidia.com/login&quot;&gt;nvidia官网&lt;/a&gt;注册一个开发者账号。&lt;/li&gt;
  &lt;li&gt;从&lt;a href=&quot;https://developer.nvidia.com/nvidia-sdk-manager&quot;&gt;nvidia官网&lt;/a&gt;下载skdmanager并安装（需登录开发者账号）。我用的是“祖传”版本，就直接那安装包装了（后面使用工具的时候还是需要开发者账号）。&lt;/li&gt;
  &lt;li&gt;参考下面的命令更换Ubuntu主机apt的源（不然后面装CUDA之类的会失败）&lt;/li&gt;
  &lt;li&gt;安装sdkmanager。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo dpkg -i sdkmanager_1.5.0-7774_amd64.deb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;通过终端打开sdkmanager后登录前面注册的账号。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sdkmanager&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;更新apt源&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;steve@steve:~/Downloads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; /etc/apt/sources.list /etc/apt/sources.list.bak
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;steve: 
steve@steve:~/Downloads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; +w /etc/apt/sources.list
steve@steve:~/Downloads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/apt/sources.list
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt;: vim: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found
steve@steve:~/Downloads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim
steve@steve:~/Downloads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/apt/sources.list
steve@steve:~/Downloads&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cat&lt;/span&gt; /etc/apt/sources.list
&lt;span class=&quot;c&quot;&gt;# 阿里源&lt;/span&gt;
deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse
steve@steve:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2开始刷机&quot;&gt;2.开始刷机&lt;/h2&gt;

&lt;h3 id=&quot;21-使sdk-manager识别硬件设备&quot;&gt;2.1 使SDK Manager识别硬件设备&lt;/h3&gt;

&lt;p&gt;具体步骤为：拔掉开发板的电源，将开发板与主机通过USB连接，插上电源后，立即按下Recover键并保持，随后按下Reset键1秒后松开，随后松开Recover键），此时设备进入了刷机模式，SDK Manager应该可以正确识别硬件设备。（如果没有识别，可以通过页面上的refresh按钮进行刷新）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-08-30-tx2-flash/tu1.png&quot; alt=&quot;sdkmanager&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-点击continue等待系统烧录完成&quot;&gt;2.2 点击CONTINUE，等待系统烧录完成&lt;/h3&gt;

&lt;p&gt;*第一次需要下载相关包，所以会很慢，需要耐心等待（我还遇到了几次重试的情况）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-08-30-tx2-flash/tu2.png&quot; alt=&quot;sdkmanager&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在系统烧录完成后会出现如下画面。保持该画面，继续进行下一步。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-08-30-tx2-flash/tu3.png&quot; alt=&quot;sdkmanager&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-初始化开发板上的ubuntu系统&quot;&gt;2.3 初始化开发板上的Ubuntu系统&lt;/h3&gt;

&lt;p&gt;此时开发板上的系统已经烧录完成，就像重做电脑端的系统一样需要初始化，做一些基本的设置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-08-30-tx2-flash/20211027222513.jpg&quot; alt=&quot;sdkmanager&quot; /&gt;&lt;/p&gt;

&lt;p&gt;过程中我们会设置开发板上Ubuntu系统的用户名密码。&lt;/p&gt;

&lt;h3 id=&quot;24-安装jetson的sdk&quot;&gt;2.4 安装Jetson的SDK&lt;/h3&gt;

&lt;p&gt;在Ubuntu18.04.5 LTS的主机上输入刚才设置到开发板上的用户名密码后点击“Install”。&lt;/p&gt;

&lt;p&gt;*192.168.55.1是当开发板作为USB ethernet路由时的IP地址。&lt;/p&gt;

&lt;p&gt;当SDK安装完成后，会出现如下画面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-08-30-tx2-flash/tu4.png&quot; alt=&quot;sdkmanager&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-其它&quot;&gt;3. 其它&lt;/h2&gt;

&lt;h3 id=&quot;31-安装jtop&quot;&gt;3.1 安装jtop&lt;/h3&gt;

&lt;p&gt;jtop是性能监控工具。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo -H pip install -U jetson-stats&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;使用命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ jtop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果pip没有装的话，需要&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;安装pip&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo apt-get install python3-pip&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;安装jtop&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ sudo -H pip3 install -U jetson-stats&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2021年10月27日：初稿。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 30 Aug 2021 10:13:16 +0000</pubDate>
        <link>http://furybrand.github.io//2021/08/30/tx2-flash/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2021/08/30/tx2-flash/</guid>
        
        <category>技术</category>
        
        <category>Linux</category>
        
        
      </item>
    
      <item>
        <title>用JMeter替换Postman</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;由于安全等原因，需要弃用Postman迁移至JMeter。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;下载及安装&quot;&gt;下载及安装&lt;/h2&gt;

&lt;p&gt;macOS的话，安装及配置参考&lt;a href=&quot;/2020/10/24/software-4-work-MAC/&quot;&gt;记从Windows办公迁移至MAC办公&lt;/a&gt;，Windows的话，直接官网下载就好了。&lt;/p&gt;

&lt;h2 id=&quot;简单入门&quot;&gt;简单入门&lt;/h2&gt;

&lt;h4 id=&quot;新增一个thread-group&quot;&gt;新增一个Thread Group&lt;/h4&gt;

&lt;p&gt;右键&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Test Plan&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Threads(Users)&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Group&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为是代替Postman，所以目前保持如下设置即可，不用调整线程数等参数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-17-use-jmeter-2-replace-postman/01.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;新增一个http-request并尝试请求&quot;&gt;新增一个HTTP Request并尝试请求&lt;/h4&gt;

&lt;p&gt;右键&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Group&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sampler&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP Request&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;将HTTP接口的相关信息填入其中，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-17-use-jmeter-2-replace-postman/02.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;右键&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Group&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start&lt;/code&gt;或者通过上方的绿色播放按钮来执行。&lt;/p&gt;

&lt;h4 id=&quot;查看结果并保留response报文&quot;&gt;查看结果并保留Response报文&lt;/h4&gt;

&lt;p&gt;通过上面的步骤，可以发送请求，但是请求发送的成功失败，啥情况，咱不知道。所以需要增加两个Listener来看下结果。&lt;/p&gt;

&lt;p&gt;右键&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Group&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Listener&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View Result Tree&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;右键&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Group&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Listener&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save Responses to a fail&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此时再次尝试发送请求便可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View Result Tree&lt;/code&gt;来看到响应的结果了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-17-use-jmeter-2-replace-postman/03.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是由于报文体中的内容并不能进行复制（或者说我暂时没有找到复制的方法），暂时通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save Responses to a fail&lt;/code&gt;来将响应保存下来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-17-use-jmeter-2-replace-postman/04.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;增加http-header-manager&quot;&gt;增加HTTP Header Manager&lt;/h4&gt;

&lt;p&gt;JMeter的话，相对Postman，很多东西需要自己维护好，若后端对于中文不识别，或者请求的报文体的格式没有正确识别的话，可能需要我们手动的维护下Header&lt;/p&gt;

&lt;p&gt;右键&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Group&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Config Element&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP Header Manager&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-17-use-jmeter-2-replace-postman/05.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时再次请求的话，可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View Result Tree&lt;/code&gt;中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Request&lt;/code&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Request Headers&lt;/code&gt;中增加了刚刚设置好的Header了。&lt;/p&gt;

&lt;p&gt;这里我曾经遇到过一个Bug，当时使用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add from Clipboard&lt;/code&gt;按钮，页面看起来一起正常，但是请求的时候就在Header中莫名其妙的增加了一个空格，导致后端一直解析出错。后来删除了之后重新手撸了一遍就好了。&lt;/p&gt;

&lt;h4 id=&quot;简单的参数化&quot;&gt;简单的参数化&lt;/h4&gt;

&lt;p&gt;JMeter支持BeanShell的方式进行参数化，详细的使用方式参考官网，我这就是简单实现一个替换。&lt;/p&gt;

&lt;p&gt;右键&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Thread Group&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pre Processors&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanShell PreProcessor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-17-use-jmeter-2-replace-postman/06.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//这是一个注释，token是xixi拼装了当前的时间戳。
String token = &quot;xixi&quot; + &quot;${__time(,)}&quot;;
String name;
String age;
int flag = 2;
switch (flag) {
    case 1:
        name = &quot;liutianyu&quot;;
        age = &quot;18&quot;;
        break;
    case 2:
        name = &quot;liuwuxin&quot;;
        age = &quot;108&quot;;
}
vars.put(&quot;token&quot;, token);
vars.put(&quot;name&quot;, name);
vars.put(&quot;age&quot;, age);
log.info(&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&quot;);
log.info(&quot;刚刚发送的数据flag为：&quot; + flag);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTTP Request&lt;/code&gt;中需要做如下改造。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-17-use-jmeter-2-replace-postman/07.png&quot; alt=&quot;截图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanShell PreProcessor&lt;/code&gt;中是可以打印日志的，日志通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JMeter&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Options&lt;/code&gt; -&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Log Viewer&lt;/code&gt;来激活日志窗口。&lt;/p&gt;

&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2021年3月17日：初稿。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 17 Mar 2021 20:35:00 +0000</pubDate>
        <link>http://furybrand.github.io//2021/03/17/use-jmeter-2-replace-postman/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2021/03/17/use-jmeter-2-replace-postman/</guid>
        
        <category>JMeter</category>
        
        <category>技术相关</category>
        
        
      </item>
    
      <item>
        <title>记一场关于Nginx配置文件及网络问题排查步骤的分享</title>
        <description>&lt;p&gt;有伙伴想听一下在排查网络环境问题上的一些经验。Nginx是一个避不开的话题，正好顺便把Nginx的一些内容一起过一下吧。下面算是该场分享的文本稿。&lt;/p&gt;

&lt;h2 id=&quot;文本稿&quot;&gt;文本稿&lt;/h2&gt;

&lt;h4 id=&quot;开篇&quot;&gt;开篇&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-09-nginx-config-file/Nginx-data_masking-Ver0.8.001.jpeg&quot; alt=&quot;开篇&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大家好，我是XXX。今天和大家聊一聊Nginx的配置文件及排查网络问题步骤。&lt;/p&gt;

&lt;h4 id=&quot;nginx是什么&quot;&gt;Nginx是什么？&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-09-nginx-config-file/Nginx-data_masking-Ver0.8.002.jpeg&quot; alt=&quot;Nginx是什么？&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C/C++&lt;/p&gt;

&lt;p&gt;Nginx是C++写的，所以在性能上肯定会比较强。名字的含义是engine x。原作者是俄罗斯人。&lt;/p&gt;

&lt;p&gt;HTTP server&lt;/p&gt;

&lt;p&gt;Nginx可以作为HTTP server来代理一些静态资源文件。图片、css、js啥的&lt;/p&gt;

&lt;p&gt;Reverse proxy server&lt;/p&gt;

&lt;p&gt;平时的工作中，接触最多的可能就是Nginx作为反向代理服务器的情况了。反向代理服务器是一种代理服务器，通常位于专用网络中的防火墙后面，并将客户端请求定向到适当的后端服务器。 反向代理提供了更高级别的抽象和控制，以确保客户端和服务器之间网络流量的顺畅流动。测试环境的话，一般是两种情况。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;一台服务器中部署了多个Web服务，利用服务器的Nginx，配合客户端机器的host（或者内网的DNS）来做访问上的隔离。如果不这么搞的话，用ip加端口来访问也不是不可以。&lt;/li&gt;
  &lt;li&gt;对于前后端分离式的部署架构，如前端是VUE的静态工程，后端多个Java应用提供HTTP接口的情况。Nginx可以作为HTTP server代理VUE工程，然后将特定的请求定向到后端服务。可以通过这种手段来解决跨域问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TCP/UDP proxy server&lt;/p&gt;

&lt;p&gt;Nginx可以作为TCP/UDP的代理服务器，在之前的文章中，我试图利用Nginx代理MySQL服务。理论上可行，但是最终因为机器的编辑环境的依赖问题没有继续下去。&lt;/p&gt;

&lt;p&gt;Mail proxy server(POP3, IMAP, SMTP)&lt;/p&gt;

&lt;p&gt;既然可以搞定运输层的协议，那么基于TCP/IP的这些邮件协议也都不在话下了。&lt;/p&gt;

&lt;p&gt;Load Balancing&lt;/p&gt;

&lt;p&gt;反向代理的进阶就是负载均衡了。说白了就是活太多了干不过来，那就多来几个人干吧。具体的策略和配置在后面会有具体介绍，这里就不多说了。&lt;/p&gt;

&lt;p&gt;FastCGI/SCGI/uwsgi&lt;/p&gt;

&lt;p&gt;这个也有点意思，稍微说两句。前两个协议是给PHP用的，最后一个是给Python用的。像平时我们用Java应用的使用，Nginx是直接将HTTP转给了后端的Java应用的。但是其实Nginx也可以处理一下，将HTTP转成uwsgi之类的协议和后端通信。能猜到原因是啥吗？对，因为PHP和Python的效率较低，直接处理HTTP的效率不高，所以先由Nginx这个由C++写的程序处理一下，减轻后端服务的压力。再深的东西我也不懂了。&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Nginx支持的还不止这些，比如ta还可以作为mp4的视频流的代理。但是我没有具体研究了。&lt;/p&gt;

&lt;h4 id=&quot;config-file&quot;&gt;Config File&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-09-nginx-config-file/Nginx-data_masking-Ver0.8.003.jpeg&quot; alt=&quot;Config_File&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Default config file - nginx.conf&lt;/p&gt;

&lt;p&gt;Nginx的默认配置文件是“Nginx.conf“，根据安装路径的不同位置也不一定在哪。&lt;/p&gt;

&lt;p&gt;“include domains/*;”&lt;/p&gt;

&lt;p&gt;注意“Nginx.conf“中的“include domains/*;”的用法，会将指定路径下的内容全部载入到一起作为配置文件生效。最后在程序中应该是一个文件，所以此时是存在优先级的问题的。&lt;/p&gt;

&lt;p&gt;Server Block(listen directive &amp;amp; server_name entries &amp;amp; location)&lt;/p&gt;

&lt;p&gt;当一个请求进来的时候，Nginx会先判断应该是哪个server来处理这个请求。此时listen命令有最高优先级，若匹配到则无需关心server_name。listen决定了这个server块儿监听的是哪个ip和端口。示例中监听的是HTTP请求的默认端口80。当匹配到了多个server，此时会用server_name项来进行匹配。server_name支持通配符的匹配。有自己的优先级规则。server_name之后就是location的匹配了，location支持正则，也有多个优先级，重点说一个。“常规字符串匹配，如果有多个location都能匹配的话，优先匹配表达式最长的location”。匹配到了某一个location之后，会根据proxy_pass进行定向。若配置成了ip+端口，就直接转发走了。若配置成了upstream里配置的参数，则会使用负载均衡策略生效。另外查询log的话，参考access_log和error_log。&lt;/p&gt;

&lt;p&gt;关于server块儿的介绍，具体可以参考&lt;a href=&quot;/2020/09/02/nginx/&quot;&gt;T-记一次Nginx分享&lt;/a&gt;中的2.1，2.2。&lt;/p&gt;

&lt;h4 id=&quot;load-balancing&quot;&gt;Load balancing&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-09-nginx-config-file/Nginx-data_masking-Ver0.8.004.jpeg&quot; alt=&quot;Load_balancing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;提前声明，这部分都总结前人和官网的说明，我没有手动试验过。&lt;/p&gt;

&lt;p&gt;round-robin(default)&lt;/p&gt;

&lt;p&gt;轮询调度，就是一个一个来，标记为down的是手动下线的。标记为backup的是当所有的机器都不可用时才会用到ta。&lt;/p&gt;

&lt;p&gt;least-connected&lt;/p&gt;

&lt;p&gt;最小连接数，因为不是所有的请求，在服务器端的处理时长都相同。如果有些请求堆积了，那就让别人来处理，大原则是保持最小连接数。&lt;/p&gt;

&lt;p&gt;ip-hash&lt;/p&gt;

&lt;p&gt;相同来源的ip，会给到某个特定的后端服务。用以解决session在多个后端服务中不共享的问题。但是现在如果走算法的话可以解决这个问题。&lt;/p&gt;

&lt;p&gt;server weights&lt;/p&gt;

&lt;p&gt;权重，按照我们分配的权重分配。&lt;/p&gt;

&lt;h4 id=&quot;load-balancing3rd-party&quot;&gt;Load balancing(3rd party)&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-09-nginx-config-file/Nginx-data_masking-Ver0.8.005.jpeg&quot; alt=&quot;Load_balancing_3rd_party&quot; /&gt;&lt;/p&gt;

&lt;p&gt;fair&lt;/p&gt;

&lt;p&gt;按后端服务器的响应时间来分配请求，响应时间短的优先分配。&lt;/p&gt;

&lt;p&gt;url_hash&lt;/p&gt;

&lt;p&gt;按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。&lt;/p&gt;

&lt;h4 id=&quot;serving-static-content&quot;&gt;Serving Static Content&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-09-nginx-config-file/Nginx-data_masking-Ver0.8.006.jpeg&quot; alt=&quot;Serving_Static_Content&quot; /&gt;&lt;/p&gt;

&lt;p&gt;稍微介绍下&lt;a href=&quot;https://github.com/FuryBrand/localized-kityminder&quot;&gt;localized-kityminder&lt;/a&gt;的部署架构。&lt;/p&gt;

&lt;h4 id=&quot;http-request&quot;&gt;Http Request&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-09-nginx-config-file/Nginx-data_masking-Ver0.8.007.jpeg&quot; alt=&quot;Http_Request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;稍微介绍下HTTP请求的流程。重点是多级缓存。对应了为啥我们配置了Host还要清理浏览器缓存等问题。&lt;/p&gt;

&lt;p&gt;ping&lt;/p&gt;

&lt;p&gt;ping无法判断tcp/ip配置的是否正确，但是可以看下本机的host配置的是否正确。&lt;/p&gt;

&lt;p&gt;telnet&lt;/p&gt;

&lt;p&gt;telnet可以判断指定端口是否可用。&lt;/p&gt;

&lt;p&gt;curl&lt;/p&gt;

&lt;p&gt;curl是通过命令行发送HTTP请求，是真正的走了HTTP协议的。&lt;/p&gt;

&lt;h4 id=&quot;share-an-issue-of-go-live&quot;&gt;share an issue of go-live&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://furybrand.github.io/assets/2021/2021-03-09-nginx-config-file/Nginx-data_masking-Ver0.8.008.jpeg&quot; alt=&quot;share_an_issue_of_go-live&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分享一个上线过程中的问题。UAT环境验证通过的版本，上到线上之后就不好用了。发现有些资源请求不到。原来公司在域名到服务器那一层用了负载均衡，导致新版本的资源文件请求到了IP1上。乱了。&lt;/p&gt;

&lt;h4 id=&quot;end&quot;&gt;End&lt;/h4&gt;

&lt;p&gt;我前面说的全部内容，在一些情况下可能都是假的。所以具体问题具体分析，逻辑才是无敌的。为逻辑干杯🍻&lt;/p&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nginx.com/resources/glossary/reverse-proxy-server/&quot;&gt;What Is a Reverse Proxy Server?(nginx.com)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nginx.org/en/&quot;&gt;nginx.org offical site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nginx.org/en/docs/&quot;&gt;nginx.org documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hg.nginx.org/nginx&quot;&gt;nginx.org change log&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hg.nginx.org/nginx/archive/tip.zip&quot;&gt;nginx.org source code(zip)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/request_processing.html&quot;&gt;How nginx processes a request(nginx.org)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;更新日志&quot;&gt;更新日志&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;2021年03月09日：初稿。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 09 Mar 2021 11:22:49 +0000</pubDate>
        <link>http://furybrand.github.io//2021/03/09/nginx-config-file/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2021/03/09/nginx-config-file/</guid>
        
        <category>技术相关</category>
        
        <category>Nginx</category>
        
        
      </item>
    
      <item>
        <title>财务计算器</title>
        <description>&lt;h1&gt;定投计算器&lt;/h1&gt;
&lt;p&gt;投资时长：&lt;input type=&quot;text&quot; id=&quot;DCA_Time&quot; /&gt;年&lt;/p&gt;
&lt;p&gt;预期年化收益率：&lt;input type=&quot;text&quot; id=&quot;DCA_incomeRate&quot; /&gt;%&lt;/p&gt;
&lt;p&gt;每月存入：&lt;input type=&quot;text&quot; id=&quot;DCA_pay&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;计算&quot; onclick=&quot;DCA_calc(1)&quot; /&gt;
&lt;input type=&quot;button&quot; value=&quot;清空&quot; onclick=&quot;DCA_calc(2)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;投资总收益：&lt;input type=&quot;text&quot; id=&quot;DCA_income&quot; /&gt;元&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
// 定投
function DCA_calc(x){
    if(x==1){
        var money = document.getElementById(&quot;DCA_pay&quot;).value; // 每月存入
        var per = document.getElementById(&quot;DCA_incomeRate&quot;).value; // 年化收益率
        var year = document.getElementById(&quot;DCA_Time&quot;).value; // 投资时长
        money = parseFloat(money);
        monthPer = Math.pow(1 + per / 100, 1 / 12) - 1;
        month = year * 12;
        // 投资总收益
        const DCA_income = money * (1 + monthPer) * (Math.pow(1 + monthPer, month) - 1) / monthPer
        document.getElementById(&quot;DCA_income&quot;).value = DCA_income.toFixed(2);
    }else if(x==2){
        document.getElementById(&quot;DCA_pay&quot;).value = &quot;&quot;;
        document.getElementById(&quot;DCA_incomeRate&quot;).value = &quot;&quot;;
        document.getElementById(&quot;DCA_Time&quot;).value = &quot;&quot;;
        document.getElementById(&quot;DCA_income&quot;).value = &quot;&quot;;
    }
}
&lt;/script&gt;

&lt;h1&gt;收益率计算器&lt;/h1&gt;
&lt;p&gt;买入价格：&lt;input type=&quot;text&quot; id=&quot;mairujia&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;卖出价格：&lt;input type=&quot;text&quot; id=&quot;maichujia&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;持有年限：&lt;input type=&quot;text&quot; id=&quot;chiyounianxian&quot; /&gt;年&lt;/p&gt;
&lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;计算&quot; onclick=&quot;jisuanTwo(1)&quot; /&gt;
&lt;input type=&quot;button&quot; value=&quot;清空&quot; onclick=&quot;jisuanTwo(2)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;总收益率：&lt;input type=&quot;text&quot; id=&quot;zongshouyilv&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;年化收益率：&lt;input type=&quot;text&quot; id=&quot;nianhuashouyilv&quot; /&gt;元&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
// 计算收益率
function jisuanTwo(x){
    if(x==1){
        var mairujiaNum = document.getElementById(&quot;mairujia&quot;).value;
        var maichujiaNum = document.getElementById(&quot;maichujia&quot;).value;
        var chiyounianxianNum  = document.getElementById(&quot;chiyounianxian&quot;).value;

        console.log(mairujiaNum);
        console.log(maichujiaNum);
        console.log(chiyounianxianNum);
        // 这里是总收益率，后面是%，所以要*100；
        var zongshouyilv = (maichujiaNum - mairujiaNum)/mairujiaNum * 100;
        console.log(zongshouyilv);
        document.getElementById(&quot;zongshouyilv&quot;).value = zongshouyilv.toFixed(3);

            var nianhuashouyilv = Math.pow(maichujiaNum/mairujiaNum, 1/chiyounianxianNum)-1;
            console.log(nianhuashouyilv);

        document.getElementById(&quot;nianhuashouyilv&quot;).value = (nianhuashouyilv*100).toFixed(3);
    }else if(x==2){
        document.getElementById(&quot;mairujia&quot;).value = &quot;&quot;;
        document.getElementById(&quot;maichujia&quot;).value = &quot;&quot;;
        document.getElementById(&quot;chiyounianxian&quot;).value = &quot;&quot;;
        document.getElementById(&quot;zongshouyilv&quot;).value = &quot;&quot;;
        document.getElementById(&quot;nianhuashouyilv&quot;).value = &quot;&quot;;
    }

}
&lt;/script&gt;

&lt;h1&gt;最终收益计算器&lt;/h1&gt;
&lt;p&gt;本金：&lt;input type=&quot;text&quot; id=&quot;benjin&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;年华收益率：&lt;input type=&quot;text&quot; id=&quot;shouyilv&quot; /&gt;%&lt;/p&gt;
&lt;p&gt;投资年限：&lt;input type=&quot;text&quot; id=&quot;touzinianxian&quot; /&gt;年&lt;/p&gt;
&lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;计算&quot; onclick=&quot;jisuanOne(1)&quot; /&gt;
&lt;input type=&quot;button&quot; value=&quot;清空&quot; onclick=&quot;jisuanOne(2)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;最终收益：&lt;input type=&quot;text&quot; id=&quot;zuizhongshouyi&quot; /&gt;元&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
// 计算最终收益
function jisuanOne(x){
    if(x==1){
        var benjinNum = new BigNumber(document.getElementById(&quot;benjin&quot;).value);
        var shouyilvNum = new BigNumber(document.getElementById(&quot;shouyilv&quot;).value);
        var touzinianxianNum = new BigNumber(document.getElementById(&quot;touzinianxian&quot;).value);
        var shouyiNum = new BigNumber(1+shouyilvNum/100);
        var zuizhongshouyi = benjinNum.multipliedBy(shouyiNum.pow(touzinianxianNum)).valueOf();
        console.log(zuizhongshouyi);
        if(String(zuizhongshouyi).indexOf(&quot;.&quot;)==-1){
            document.getElementById(&quot;zuizhongshouyi&quot;).value =zuizhongshouyi
            console.log(zuizhongshouyi);
        }else{
            var splitArr = String(zuizhongshouyi).split(&apos;.&apos;);
            document.getElementById(&quot;zuizhongshouyi&quot;).value =splitArr[0]+&apos;.&apos;+splitArr[1].substr(0,3);
            console.log(zuizhongshouyi);
        }
    }else if(x==2){
        document.getElementById(&quot;benjin&quot;).value = &quot;&quot;;
        document.getElementById(&quot;shouyilv&quot;).value = &quot;&quot;;
        document.getElementById(&quot;touzinianxian&quot;).value = &quot;&quot;;
        document.getElementById(&quot;zuizhongshouyi&quot;).value = &quot;&quot;;
    }

}
&lt;/script&gt;

&lt;h1&gt;非劳动收支平衡计算器&lt;/h1&gt;
&lt;p&gt;本金：&lt;input type=&quot;text&quot; class=&quot;benjin&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;月定投：&lt;input type=&quot;text&quot; class=&quot;dingtoujine&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;年华收益率：&lt;input type=&quot;text&quot; class=&quot;nianhuashouyi&quot; /&gt;%&lt;/p&gt;
&lt;p&gt;月支出：&lt;input type=&quot;text&quot; class=&quot;yuezhichu&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;计算&quot; onclick=&quot;jisuanFour(1)&quot; /&gt;
&lt;input type=&quot;button&quot; value=&quot;清空&quot; onclick=&quot;jisuanFour(2)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;月均获得收益：&lt;input type=&quot;text&quot; class=&quot;yueshouyi&quot; /&gt;元&lt;/p&gt;
&lt;p&gt;非劳动收支平衡所需时间：&lt;input type=&quot;text&quot; class=&quot;time&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
// 非劳动收支平衡
function jisuanFour(x){
    if(x==1){
        var benjin = $(&quot;.benjin&quot;).val();
        var dingtoujine = $(&quot;.dingtoujine&quot;).val();
        var nianhuashouyi = $(&quot;.nianhuashouyi&quot;).val();
        var yuezhichu = $(&quot;.yuezhichu&quot;).val();

        var monthYield = Math.pow(1 + nianhuashouyi / 100, 1 / 12) - 1;
        var month = 0
        var income = 0
        do{
            month++
            var gain = (dingtoujine * (1 + monthYield) * (Math.pow(1 + monthYield, month) - 1)) / monthYield
            var earning = benjin * Math.pow(1 + monthYield, month)
            income = (gain + earning) * monthYield
        }while(yuezhichu &gt; income)
        $(&quot;.yueshouyi&quot;).val(income.toFixed(2));
        $(&quot;.time&quot;).val(Math.floor(month / 12)+&apos;年&apos;+month % 12+&apos;个月&apos;);
    }else if(x==2){
        document.getElementsByClassName(&quot;benjin&quot;)[0].value = &quot;&quot;;
        document.getElementsByClassName(&quot;dingtoujine&quot;)[0].value = &quot;&quot;;
        document.getElementsByClassName(&quot;nianhuashouyi&quot;)[0].value = &quot;&quot;;
        document.getElementsByClassName(&quot;yuezhichu&quot;)[0].value = &quot;&quot;;
    }

}
&lt;/script&gt;

</description>
        <pubDate>Wed, 17 Feb 2021 08:37:25 +0000</pubDate>
        <link>http://furybrand.github.io//2021/02/17/finance-calculator/</link>
        <guid isPermaLink="true">http://furybrand.github.io//2021/02/17/finance-calculator/</guid>
        
        <category>JS</category>
        
        <category>财务</category>
        
        
      </item>
    
  </channel>
</rss>
